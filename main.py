from datetime import datetime, timedelta, timezone
import os
import csv
import requests
import logging
import ccxt
import time
import json

    
# C·∫•u h√¨nh logging
# logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s:%(message)s")
# logger = logging.getLogger("AUTO_SELL")
logger = logging.getLogger("AUTO_SELL")
logger.setLevel(logging.DEBUG)  # Lu√¥n b·∫≠t DEBUG/INFO

handler = logging.StreamHandler()
handler.setLevel(logging.DEBUG)

formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)

if not logger.handlers:
    logger.addHandler(handler)
# ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng
SPREADSHEET_URL = os.environ.get("SPREADSHEET_URL")
OKX_API_KEY = os.environ.get("OKX_API_KEY")
OKX_API_SECRET = os.environ.get("OKX_API_SECRET")
OKX_API_PASSPHRASE = os.environ.get("OKX_API_PASSPHRASE")

# Kh·ªüi t·∫°o OKX
exchange = ccxt.okx({
    'apiKey': OKX_API_KEY,
    'secret': OKX_API_SECRET,
    'password': OKX_API_PASSPHRASE,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'spot'
    }
})

spot_entry_prices = {}  # ‚úÖ khai b√°o bi·∫øn to√†n c·ª•c
spot_entry_prices_path = os.path.join(os.path.dirname(__file__), "spot_entry_prices.json")        
def load_entry_prices():
    spot_entry_prices_path = os.path.join(os.path.dirname(__file__), "spot_entry_prices.json") 
    try:
        if not os.path.exists(spot_entry_prices_path):
            logger.warning(f"‚ö†Ô∏è File {spot_entry_prices_path} KH√îNG t·ªìn t·∫°i! => Tr·∫£ v·ªÅ dict r·ªóng.")
            return {}
        with open(spot_entry_prices_path, "r") as f:
            data = json.load(f)
            if not isinstance(data, dict):
                logger.warning(f"‚ö†Ô∏è D·ªØ li·ªáu trong {spot_entry_prices_path} KH√îNG ph·∫£i dict: {type(data)}")
                return {}
            logger.debug(f"üì• ƒê√£ load JSON t·ª´ file: {json.dumps(data, indent=2)}")  # üëà Log to√†n b·ªô json
            return data
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi load {spot_entry_prices_path}: {e}")
        return {}
        
def auto_sell_once():
    global spot_entry_prices
    logging.info("üü¢ [AUTO SELL WATCHER] ƒê√£ kh·ªüi ƒë·ªông lu·ªìng ki·ªÉm tra auto sell")

    # Load l·∫°i d·ªØ li·ªáu

    new_data = load_entry_prices()
    if isinstance(new_data, dict):
        spot_entry_prices.update(new_data)
        # Sau khi load th√†nh c√¥ng:
        for symbol, data in spot_entry_prices.items():
            logger.debug(f"[ENTRY JSON] {symbol}: {data} (type={type(data)})")
    else:
        logging.warning("‚ö†Ô∏è D·ªØ li·ªáu load t·ª´ JSON kh√¥ng ph·∫£i dict!")

    try:
        logging.info("üîÑ [AUTO SELL] Ki·ªÉm tra v√≠ SPOT ƒë·ªÉ ch·ªët l·ªùi...")
        balances = exchange.fetch_balance()
        tickers = exchange.fetch_tickers()
        updated_prices = spot_entry_prices.copy()
        # ‚úÖ L·ªçc coin trong t√†i kho·∫£n
        spot_coins = {
            coin: float(data.get("total", 0))
            for coin, data in balances.items()
            if (
                isinstance(data, dict)
                and float(data.get("total", 0)) > 0
                and coin.endswith("/USDT")       # Ch·ªâ l·∫•y coin/USDT
                and coin in tickers              # C√≥ gi√° hi·ªán t·∫°i
                and float(tickers[coin]['last']) * float(data.get("total", 0)) > 1  # Gi√° tr·ªã > 1 USDT
                and amount >= 1
            )
        }
        
        # ‚úÖ Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng coin
        for coin, amount in spot_coins.items():
            try:
                price = float(tickers[coin]['last'])
                value = price * amount
                logger.debug(f"[SPOT HOLDINGS] {coin}: s·ªë l∆∞·ª£ng = {amount:.4f}, gi√° = {price:.6f} ‚Üí gi√° tr·ªã = {value:.2f} USDT")
            except Exception as e:
                logger.warning(f"[‚ö†Ô∏è] Kh√¥ng th·ªÉ l·∫•y gi√° cho {coin}: {e}")
        
        # ‚úÖ Duy·ªát t·ª´ng coin trong balance
        for coin, balance_data in balances.items():
            try:
                if not isinstance(balance_data, dict):
                    logger.warning(f"‚ö†Ô∏è {coin} kh√¥ng ph·∫£i dict: {balance_data}")
                    continue
        
                balance = balance_data.get("total", 0)
                if not balance or balance <= 0:
                    continue
                    
                symbol_dash = f"{coin}-USDT"
                symbol_slash = f"{coin}/USDT"
                # ∆Øu ti√™n symbol c√≥ trong tickers
                ticker = tickers.get(symbol_dash) or tickers.get(symbol_slash)
                
                if not ticker:
                    logger.warning(f"‚ö†Ô∏è Kh√¥ng c√≥ gi√° hi·ªán t·∫°i cho {symbol_dash} ho·∫∑c {symbol_slash}")
                    continue
        
                # C√°c b∆∞·ªõc x·ª≠ l√Ω ti·∫øp theo...
                current_price = ticker["last"]
                logger.debug(f"üîç ƒêang ki·ªÉm tra coin: {coin}, symbol: {symbol}, entry_keys: {list(spot_entry_prices.keys())}")
                if not isinstance(symbol, str):
                    logger.warning(f"‚ö†Ô∏è symbol kh√¥ng ph·∫£i string: {symbol} ({type(symbol)})")
                    continue
                entry_data = spot_entry_prices.get(symbol.upper())

                
                # ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu entry_data ph·∫£i l√† dict
                if not isinstance(entry_data, dict):
                    logger.warning(f"‚ö†Ô∏è {symbol} entry_data KH√îNG ph·∫£i dict: {entry_data}")
                    continue
                
                # ‚úÖ L·∫•y gi√° mua ban ƒë·∫ßu
                entry_price = entry_data.get("price")
                if not isinstance(entry_price, (int, float)):
                    logger.warning(f"‚ö†Ô∏è {symbol} entry_price kh√¥ng ph·∫£i s·ªë: {entry_price}")
                    continue
                
                # ‚úÖ T√≠nh ph·∫ßn trƒÉm l·ªùi
                percent_gain = ((current_price - entry_price) / entry_price) * 100
                # ‚úÖ Ki·ªÉm tra n·∫øu ƒë·∫°t m·ª©c ch·ªët l·ªùi, Sau khi b√°n xong, xo√° coin kh·ªèi danh s√°ch theo d√µi
                was_updated = False  # ‚úÖ Th√™m bi·∫øn c·ªù theo d√µi
                if percent_gain >= 20:
                    logger.info(f"‚úÖ CH·ªêT L·ªúI: {symbol} tƒÉng {percent_gain:.2f}% t·ª´ {entry_price} => {current_price}")
                    try:
                        exchange.create_market_sell_order(symbol, balance)
                        logger.info(f"üí∞ ƒê√£ b√°n {symbol} s·ªë l∆∞·ª£ng {balance} ƒë·ªÉ ch·ªët l·ªùi")
                        updated_prices.pop(symbol, None)     # ‚úÖ Xo√° kh·ªèi danh s√°ch theo d√µi
                        was_updated = True                   # ‚úÖ ƒê√°nh d·∫•u c√≥ thay ƒë·ªïi
                    except Exception as e:
                        logger.error(f"‚ùå L·ªói khi b√°n {symbol}: {e}")
                        continue  
                # ‚úÖ Ch·ªâ ghi file n·∫øu c√≥ thay ƒë·ªïi th·ª±c s·ª±
                if was_updated:
                    spot_entry_prices = updated_prices
                    save_entry_prices(spot_entry_prices)
                    logger.debug(f"üìÇ ƒê√£ c·∫≠p nh·∫≠t spot_entry_prices: {json.dumps(spot_entry_prices, indent=2)}")
            except Exception as e:
                logger.error(f"‚ùå L·ªói khi x·ª≠ l√Ω coin {coin}: {e}")
    except Exception as e:
        logger.error(f"‚ùå L·ªói ch√≠nh trong auto_sell_once(): {e}")

        
def fetch_sheet():
    try:
        csv_url = SPREADSHEET_URL.replace("/edit#gid=", "/export?format=csv&gid=")
        res = requests.get(csv_url)
        res.raise_for_status()
        return list(csv.reader(res.content.decode("utf-8").splitlines()))
    except Exception as e:
        logging.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i Google Sheet: {e}")
        return []

def get_short_term_trend(symbol):
    score = 0
    timeframes = ["1h", "4h", "1d"]

    for tf in timeframes:
        try:
            ohlcv = exchange.fetch_ohlcv(symbol, timeframe=tf, limit=50)
            closes = [c[4] for c in ohlcv]
            if len(closes) < 50:
                continue

            ema20 = sum(closes[-20:]) / 20
            ema50 = sum(closes[-50:]) / 50
            rsi = compute_rsi(closes, period=14)

            if rsi > 60 and ema20 > ema50:
                score += 2
            elif rsi > 50 and ema20 > ema50:
                score += 1
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ fetch n·∫øn {tf} cho {symbol}: {e}")
            continue

    if score >= 3:
        return "TƒÇNG"
    elif score <= 1:
        return "GI·∫¢M"
    else:
        return "KH√îNG R√ï"

def compute_rsi(closes, period=14):
    deltas = [closes[i] - closes[i - 1] for i in range(1, len(closes))]
    gains = [delta if delta > 0 else 0 for delta in deltas]
    losses = [-delta if delta < 0 else 0 for delta in deltas]

    avg_gain = sum(gains[:period]) / period
    avg_loss = sum(losses[:period]) / period
    if avg_loss == 0:
        return 100

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def run_bot():
    global spot_entry_prices
    rows = fetch_sheet()

    for i, row in enumerate(rows):
        try:
            logger.debug(f"üîç ƒêang x·ª≠ l√Ω d√≤ng {i}: {row}")
            if not row or len(row) < 2:
                logger.warning(f"‚ö†Ô∏è D√≤ng {i} kh√¥ng h·ª£p l·ªá: {row}")
                continue

            symbol = row[0].strip().upper()        # v√≠ d·ª•: DOGE-USDT
            signal = row[1].strip().upper()        # v√≠ d·ª•: MUA M·∫†NH
            gia_mua = float(row[2]) if len(row) > 2 and row[2] else None
            ngay = row[3].strip() if len(row) > 3 else ""
            da_mua = row[5].strip().upper() if len(row) > 5 else ""

            logger.info(f"üõí ƒêang x√©t mua {symbol}...")

            if not gia_mua or da_mua == "ƒê√É MUA":
                logger.info(f"‚è© B·ªè qua {symbol} do {'ƒë√£ mua' if da_mua == 'ƒê√É MUA' else 'thi·∫øu gi√°'}")
                continue

            if signal != "MUA M·∫†NH":
                logger.info(f"‚ùå {symbol} b·ªã lo·∫°i do t√≠n hi·ªáu Sheet = {signal}")
                continue

            # ‚úÖ Ki·ªÉm tra n·∫øu ƒë√£ qu√° h·∫°n t·∫ßn su·∫•t (theo gi·ªù Vi·ªát Nam UTC+7)
            if len(row) > 4 and row[4].strip():
                try:
                    freq_minutes = int(row[4].strip())
                    time_str = row[3].strip()
                    signal_time = datetime.strptime(time_str, "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone(timedelta(hours=7)))
                    now_vn = datetime.now(timezone(timedelta(hours=7)))
                    elapsed = (now_vn - signal_time).total_seconds() / 60
                    if elapsed > freq_minutes:
                        logger.info(f"‚è± B·ªè qua {symbol} v√¨ ƒë√£ qu√° h·∫°n {freq_minutes} ph√∫t (ƒë√£ qua {int(elapsed)} ph√∫t)")
                        continue
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra t·∫ßn su·∫•t cho {symbol}: {e}")
            
            # ‚úÖ Ki·ªÉm tra n·∫øu ƒë√£ c√≥ coin trong v√≠ Spot
            coin_name = symbol.split("-")[0]
            balances = exchange.fetch_balance()
            asset_balance = balances.get(coin_name, {}).get('total', 0)

            if asset_balance and asset_balance > 1:
                logger.info(f"‚ùå B·ªè qua {symbol} v√¨ ƒë√£ c√≥ {asset_balance} {coin_name} trong v√≠")
                continue

            # ‚úÖ Ph√¢n t√≠ch xu h∆∞·ªõng ng·∫Øn h·∫°n thay cho TradingView
            trend = get_short_term_trend(symbol)
            logger.info(f"üìâ Xu h∆∞·ªõng ng·∫Øn h·∫°n c·ªßa {symbol} = {trend}")
            
            # ‚úÖ N·∫øu trend l√† TƒÇNG ‚Üí mua ngay (logic c≈©)
            if trend == "TƒÇNG":
                try:
                    usdt_amount = 10
                    price = float(exchange.fetch_ticker(symbol)['last']) # √©p v·ªÅ float
                    amount = round(usdt_amount / price, 6)
                    # === CH·ªêNG FOMO (d√†nh cho trend TƒÇNG) ===
                    ohlcv = exchange.fetch_ohlcv(symbol, timeframe="1h", limit=30)
                    closes = [c[4] for c in ohlcv]
                    volumes = [c[5] for c in ohlcv]
                    
                    rsi = compute_rsi(closes, period=14)
                    vol = volumes[-1]
                    vol_sma20 = sum(volumes[-20:]) / 20
                    price_now = closes[-1]
                    price_3bars_ago = closes[-4]
                    price_change = (price_now - price_3bars_ago) / price_3bars_ago * 100
                    
                    if rsi > 70 or vol > vol_sma20 * 2 or price_change > 10:
                        logger.info(f"‚õî {symbol} b·ªã lo·∫°i do FOMO trong trend TƒÇNG (RSI={rsi:.1f}, Œîgi√° 3h={price_change:.1f}%)")
                        continue
                    logger.info(f"üí∞ [TƒÇNG] Mua {amount} {symbol} v·ªõi {usdt_amount} USDT (gi√° {price})")
                    order = exchange.create_market_buy_order(symbol, amount)
                    logger.info(f"‚úÖ ƒê√£ mua {symbol} theo TƒÇNG: {order}")
                    # Gi·∫£ s·ª≠ sau khi v√†o l·ªánh mua th√†nh c√¥ng:
                    # ‚úÖ Load l·∫°i d·ªØ li·ªáu c≈© ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu c√°c coin kh√°c
                    spot_entry_prices.update(load_entry_prices())
                    spot_entry_prices[symbol] = {
                        "price": price,
                        "timestamp": datetime.utcnow().isoformat() + "Z"
                    }
                    save_entry_prices(spot_entry_prices)
                    time.sleep(1) # ƒë·∫£m b·∫£o file ƒë∆∞·ª£c ghi ho√†n to√†n
                    continue  # ƒê√£ mua r·ªìi th√¨ b·ªè qua ph·∫ßn d∆∞·ªõi
                except Exception as e:
                    logger.error(f"‚ùå L·ªói khi mua {symbol} theo trend TƒÇNG: {e}")
                    continue
            
            # ‚úÖ N·∫øu trend l√† SIDEWAY ‚Üí ki·ªÉm tra th√™m RSI v√† Volume
            if trend == "SIDEWAY":
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, timeframe="1h", limit=30)
                    closes = [c[4] for c in ohlcv]
                    volumes = [c[5] for c in ohlcv]
                    # Gi·∫£ s·ª≠ ƒë√£ c√≥ ohlcv, closes, volumes
                    rsi = compute_rsi(closes, period=14)
                    vol = volumes[-1]
                    vol_sma20 = sum(volumes[-20:]) / 20
                    price_now = closes[-1]
                    price_3bars_ago = closes[-4]
                    price_change = (price_now - price_3bars_ago) / price_3bars_ago * 100
                    # N·∫øu c√≥ d·∫•u hi·ªáu FOMO th√¨ b·ªè qua
                    if rsi > 70 or vol > vol_sma20 * 2 or price_change > 10:
                        logger.info(f"‚õî {symbol} b·ªã lo·∫°i do d·∫•u hi·ªáu FOMO (RSI={rsi:.2f}, Œîgi√° 3h={price_change:.1f}%, vol={vol:.0f})")
                        continue
                    if len(closes) < 20:
                        logger.warning(f"‚ö†Ô∏è Kh√¥ng ƒë·ªß d·ªØ li·ªáu n·∫øn cho {symbol}")
                        continue
            
                    rsi = compute_rsi(closes, period=14)
                    vol = volumes[-1]
                    vol_sma20 = sum(volumes[-20:]) / 20
            
                    logger.debug(f"üìä {symbol}: RSI = {rsi}, Volume = {vol}, SMA20 = {vol_sma20}")
            
                    if rsi >= 55 or vol >= vol_sma20:
                        logger.info(f"‚õî {symbol} b·ªã lo·∫°i (SIDEWAY nh∆∞ng kh√¥ng n√©n ƒë·ªß m·∫°nh)")
                        continue
                    # ‚úÖ Mua n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán SIDEWAY t√≠ch lu·ªπ
                    usdt_amount = 10
                    price = exchange.fetch_ticker(symbol)['last']
                    amount = round(usdt_amount / price, 6)
                    logger.info(f"üí∞ [SIDEWAY] Mua {amount} {symbol} v·ªõi {usdt_amount} USDT (gi√° {price})")
                    order = exchange.create_market_buy_order(symbol, amount)
                    logger.info(f"‚úÖ ƒê√£ mua {symbol} theo SIDEWAY: {order}")
                    # Gi·∫£ s·ª≠ sau khi v√†o l·ªánh mua th√†nh c√¥ng:
                    # ‚úÖ Load l·∫°i d·ªØ li·ªáu c≈© ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu c√°c coin kh√°c
                    spot_entry_prices.update(load_entry_prices())
                    spot_entry_prices[symbol] = {
                        "price": price,
                        "timestamp": datetime.utcnow().isoformat() + "Z"
                    }
                    save_entry_prices(spot_entry_prices)
                    time.sleep(1) # ƒë·∫£m b·∫£o file ƒë∆∞·ª£c ghi ho√†n to√†n
                except Exception as e:
                    logger.error(f"‚ùå L·ªói khi mua {symbol} theo SIDEWAY: {e}")            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi x·ª≠ l√Ω d√≤ng {i} - {row}: {e}")
            
def save_entry_prices(prices_dict):
    try:
        with open("spot_entry_prices.json", "w") as f:
            json.dump(prices_dict, f, indent=2)
            f.flush()  # üîÅ ƒê·∫£m b·∫£o ghi xong
            os.fsync(f.fileno())  # üíæ Ghi ra ƒëƒ©a th·∫≠t (tr√°nh ghi t·∫°m v√†o cache)
        logger.debug("üíæ ƒê√£ ghi file spot_entry_prices.json xong.")
        logger.debug(f"üì¶ N·ªôi dung file: \n{json.dumps(prices_dict, indent=2)}")
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l∆∞u file spot_entry_prices.json: {e}")
        
def main():
    now = datetime.utcnow()
    minute = now.minute
    hour = now.hour

    print(f"üï∞Ô∏è B·∫Øt ƒë·∫ßu l√∫c {now.isoformat()}")
    # ‚úÖ Ch·ªâ ch·∫°y run_bot n·∫øu ph√∫t hi·ªán t·∫°i chia h·∫øt 60 (v√≠ d·ª•: 00:00, 01:00, 02:00...)
    if minute == 0:
        run_bot()
        logger.info("üü¢ B·∫Øt ƒë·∫ßu ch·∫°y auto_sell_once() sau run_bot()")
        auto_sell_once()
    else:
        print(f"‚åõ Ch∆∞a ƒë·∫øn th·ªùi ƒëi·ªÉm ch·∫°y run_bot(), ph√∫t hi·ªán t·∫°i = {minute}")
        logger.info("üü¢ B·∫Øt ƒë·∫ßu ch·∫°y auto_sell_once() khi KH√îNG c√≥ run_bot()")
        auto_sell_once()    
if __name__ == "__main__":
    main()
