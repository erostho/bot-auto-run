import os
import csv
import requests
import logging
from datetime import datetime
import ccxt

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s:%(name)s: %(message)s")
logger = logging.getLogger()

# ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng
SPREADSHEET_URL = os.environ.get("SPREADSHEET_URL")
OKX_API_KEY = os.environ.get("OKX_API_KEY")
OKX_API_SECRET = os.environ.get("OKX_API_SECRET")
OKX_API_PASSPHRASE = os.environ.get("OKX_API_PASSPHRASE")

# Kh·ªüi t·∫°o OKX
exchange = ccxt.okx({
    'apiKey': OKX_API_KEY,
    'secret': OKX_API_SECRET,
    'password': OKX_API_PASSPHRASE,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'spot'
    }
})


def fetch_sheet():
    try:
        csv_url = SPREADSHEET_URL.replace("/edit#gid=", "/export?format=csv&gid=")
        res = requests.get(csv_url)
        res.raise_for_status()
        return list(csv.reader(res.content.decode("utf-8").splitlines()))
    except Exception as e:
        logging.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i Google Sheet: {e}")
        return []


def run_bot():
    rows = fetch_sheet()

    for i, row in enumerate(rows):
        try:
            logger.debug(f"üîç ƒêang x·ª≠ l√Ω d√≤ng {i}: {row}")
            if not row or len(row) < 2:
                logger.warning(f"‚ö†Ô∏è D√≤ng {i} kh√¥ng h·ª£p l·ªá: {row}")
                continue

            symbol = row[0].strip().upper()        # v√≠ d·ª•: DOGE-USDT
            signal = row[1].strip().upper()        # v√≠ d·ª•: MUA M·∫†NH
            gia_mua = float(row[2]) if len(row) > 2 and row[2] else None
            ngay = row[3].strip() if len(row) > 3 else ""
            da_mua = row[5].strip().upper() if len(row) > 5 else ""

            coin = symbol.replace("-USDT", "")
            logger.info(f"üõí ƒêang x√©t mua {symbol}...")

            # B·ªè qua n·∫øu ch∆∞a c√≥ gi√° mua ho·∫∑c ƒë√£ mua r·ªìi
            if not gia_mua or da_mua == "ƒê√É MUA":
                logger.info(f"‚è© B·ªè qua {symbol} do {'ƒë√£ mua' if da_mua == 'ƒê√É MUA' else 'thi·∫øu gi√°'}")
                continue

            # Ki·ªÉm tra t√≠n hi·ªáu sheet
            if signal != "MUA M·∫†NH":
                logger.info(f"‚ùå {symbol} b·ªã lo·∫°i do t√≠n hi·ªáu Sheet = {signal}")
                continue

            # ‚úÖ G·ª≠i t√≠n hi·ªáu check TradingView tr·ª±c ti·∫øp
            try:
                tv_symbol = normalize_tv_symbol(symbol)
                url = "https://scanner.tradingview.com/crypto/scan"
                payload = {
                    "symbols": {"tickers": [tv_symbol]},
                    "columns": ["recommendation"]
                }
        
                logging.debug(f"üì° G·ª≠i request TV cho {symbol} ‚Üí {tv_symbol} v·ªõi payload: {payload}")
                res = requests.post(url, json=payload, timeout=5)
                res.raise_for_status()
        
                data = res.json()
                logging.debug(f"üìä Ph·∫£n h·ªìi t·ª´ TradingView cho {tv_symbol}: {data}")
        
                if not data.get("data"):
                    return None
                return data["data"][0]["d"][0]
        
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è L·ªói l·∫•y t√≠n hi·ªáu TV cho {symbol}: {e}")
                return None


            # ‚úÖ Mua SPOT
            usdt_amount = 10
            price = exchange.fetch_ticker(symbol.replace("-", "/"))['last']
            quantity = round(usdt_amount / price, 6)

            logger.info(f"üü¢ Mua {symbol} v·ªõi kh·ªëi l∆∞·ª£ng {quantity} @ {price}")
            order = exchange.create_market_buy_order(symbol.replace("-", "/"), quantity)

            logger.info(f"‚úÖ ƒê√£ mua {symbol}: OrderID = {order['id']}")

        except Exception as e:
            logger.warning(f"‚ùå L·ªói d√≤ng {i}: {e}")


if __name__ == "__main__":
    logger.info("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y bot SPOT OKX...")
    run_bot()
