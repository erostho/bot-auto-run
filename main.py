import os
import ccxt
import pandas as pd
from datetime import datetime
from tradingview_ta import TA_Handler, Interval

# Logging setup
logging.basicConfig(
    level=logging.DEBUG,  # thay v√¨ DEBUG/INFO
    format="%(asctime)s - %(levelname)s - %(message)s",
    stream=sys.stdout
)

# --- Load bi·∫øn m√¥i tr∆∞·ªùng ---
SPREADSHEET_URL = os.environ.get("SPREADSHEET_URL")
OKX_API_KEY = os.environ.get("OKX_API_KEY")
OKX_API_SECRET = os.environ.get("OKX_API_SECRET")
OKX_API_PASSPHRASE = os.environ.get("OKX_API_PASSPHRASE")

# --- Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng ---
if not SPREADSHEET_URL or not OKX_API_KEY:
    print("‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng")
    exit()

# --- K·∫øt n·ªëi OKX SPOT ---
exchange = ccxt.okx({
    'apiKey': OKX_API_KEY,
    'secret': OKX_API_SECRET,
    'password': OKX_API_PASSPHRASE,
    'enableRateLimit': True,
    'options': {'defaultType': 'spot'}
})
exchange.load_markets()

# --- ƒê·ªçc Google Sheet public (CSV) ---
try:
    df = pd.read_csv(SPREADSHEET_URL)
except Exception as e:
    print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc Sheet: {e}")
    exit()

# --- H√†m check t√≠n hi·ªáu t·ª´ TradingView ---
def check_tradingview_signal(symbol: str) -> str:
    try:
        handler = TA_Handler(
            symbol=symbol.upper(),
            screener="crypto",
            exchange="OKX",
            interval=Interval.INTERVAL_1_HOUR
        )
        result = handler.get_analysis()
        return result.summary.get("RECOMMENDATION", "")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói TV cho {symbol}: {e}")
        return ""

# --- Duy·ªát t·ª´ng d√≤ng coin ---
now = datetime.utcnow()

for i, row in df.iterrows():
    try:
        coin = str(row.get("Coin")).strip()
        signal = str(row.get("T√≠n hi·ªáu")).strip().upper()
        buy_status = str(row.get("ƒê√£ mua", "")).strip().upper()
        date_str = str(row.get("Ng√†y", "")).strip()
        gia_mua = row.get("Gi√° Mua", None)

        if not coin or signal != "MUA M·∫†NH":
            continue
        if buy_status == "R·ªíI":
            continue

        # Ki·ªÉm tra th·ªùi gian t√≠n hi·ªáu c√≤n trong 60 ph√∫t
        try:
            dt = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
            if (now - dt).total_seconds() > 60 * 60:
                continue
        except:
            print(f"‚ö†Ô∏è L·ªói th·ªùi gian cho {coin}, b·ªè qua")
            continue

        symbol_spot = coin.upper().replace("/", "-")
        market = exchange.markets.get(symbol_spot)
        
        if not market:
            print(f"‚ö†Ô∏è {symbol_spot} KH√îNG t√¨m th·∫•y trong exchange.markets")
            
            # G·ª£i √Ω c√°c symbol g·∫ßn gi·ªëng
            similar = [s for s in exchange.markets.keys() if coin.split("/")[0].upper() in s]
            print(f"üîç G·ª£i √Ω symbol g·∫ßn gi·ªëng: {similar}")
            continue
        
        if not market.get("spot"):
            print(f"‚ö†Ô∏è {symbol_spot} T·ªíN T·∫†I nh∆∞ng KH√îNG PH·∫¢I SPOT tr√™n OKX")
            continue
        
        # ‚úÖ N·∫øu qua ƒë∆∞·ª£c th√¨ l√† SPOT h·ª£p l·ªá
        print(f"‚úÖ {symbol_spot} l√† SPOT h·ª£p l·ªá")

        # ‚úÖ Check t√≠n hi·ªáu t·ª´ TradingView
        tv_signal = check_tradingview_signal(coin)
        if tv_signal not in ["BUY", "STRONG_BUY"]:
            print(f"‚õî {coin} b·ªã lo·∫°i do TV = {tv_signal}")
            continue

        # ‚úÖ L·∫•y gi√° hi·ªán t·∫°i
        try:
            price = exchange.fetch_ticker(symbol)['last']
        except:
            print(f"‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° {symbol}")
            continue

        # --- MUA n·∫øu ch∆∞a mua ---
        usdt_amount = 10
        amount = round(usdt_amount / price, 6)
        try:
            order = exchange.create_market_buy_order(symbol, amount)
            print(f"‚úÖ ƒê√£ MUA {symbol} {amount:.6f} gi√° ~{price:.4f}")
        except Exception as e:
            print(f"‚ùå L·ªói MUA {symbol}: {e}")
            continue

    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói t·∫°i d√≤ng {i}: {e}")
        continue

# --- L·∫∑p l·∫°i ƒë·ªÉ x·ª≠ l√Ω B√ÅN ---
for i, row in df.iterrows():
    try:
        coin = str(row.get("Coin")).strip()
        gia_mua = float(row.get("Gi√° Mua", 0))
        buy_status = str(row.get("ƒê√£ mua", "")).strip().upper()
        sell_status = str(row.get("Gi√° B√°n", "")).strip()

        if not coin or buy_status != "R·ªíI" or not gia_mua:
            continue

        symbol = f"{coin.upper()}/USDT"
        if symbol not in exchange.markets:
            continue

        current_price = exchange.fetch_ticker(symbol)['last']
        if current_price < gia_mua * 1.1:
            continue

        balance = exchange.fetch_balance()
        coin_code = coin.upper()
        amount = balance.get(coin_code, {}).get("free", 0)
        if amount <= 0:
            continue

        order = exchange.create_market_sell_order(symbol, amount)
        print(f"üí∞ ƒê√£ B√ÅN {symbol} {amount:.6f} gi√° ~{current_price:.4f}")

    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói b√°n {coin}: {e}")
        continue

print("‚úÖ Bot SPOT OKX ho√†n t·∫•t.")
