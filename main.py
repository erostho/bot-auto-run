import os
import csv
import requests
import logging
from datetime import datetime
import ccxt

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s:%(name)s: %(message)s")
logger = logging.getLogger()

# L·∫•y bi·∫øn m√¥i tr∆∞·ªùng
API_KEY = os.getenv("OKX_API_KEY")
API_SECRET = os.getenv("OKX_API_SECRET")
API_PASS = os.getenv("OKX_API_PASS")
SHEET_URL = os.getenv("GOOGLE_SHEET_PUBLIC_CSV")  # link CSV c·ªßa sheet public

# K·∫øt n·ªëi OKX
exchange = ccxt.okx({
    "apiKey": API_KEY,
    "secret": API_SECRET,
    "password": API_PASS,
    "enableRateLimit": True,
    "options": {
        "defaultType": "spot"
    }
})


def fetch_sheet():
    try:
        response = requests.get(SHEET_URL)
        response.raise_for_status()
        decoded = response.content.decode('utf-8')
        reader = csv.reader(decoded.splitlines())
        return list(reader)[1:]  # b·ªè d√≤ng ti√™u ƒë·ªÅ
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi ƒë·ªçc Google Sheet: {e}")
        return []


def run_bot():
    rows = fetch_sheet()

    for i, row in enumerate(rows):
        try:
            logger.debug(f"üîç ƒêang x·ª≠ l√Ω d√≤ng {i}: {row}")
            if not row or len(row) < 2:
                logger.warning(f"‚ö†Ô∏è D√≤ng {i} kh√¥ng h·ª£p l·ªá: {row}")
                continue

            symbol = row[0].strip().upper()        # v√≠ d·ª•: DOGE-USDT
            signal = row[1].strip().upper()        # v√≠ d·ª•: MUA M·∫†NH
            gia_mua = float(row[2]) if len(row) > 2 and row[2] else None
            ngay = row[3].strip() if len(row) > 3 else ""
            da_mua = row[5].strip().upper() if len(row) > 5 else ""

            coin = symbol.replace("-USDT", "")
            logger.info(f"üõí ƒêang x√©t mua {symbol}...")

            # B·ªè qua n·∫øu ch∆∞a c√≥ gi√° mua ho·∫∑c ƒë√£ mua r·ªìi
            if not gia_mua or da_mua == "ƒê√É MUA":
                logger.info(f"‚è© B·ªè qua {symbol} do {'ƒë√£ mua' if da_mua == 'ƒê√É MUA' else 'thi·∫øu gi√°'}")
                continue

            # Ki·ªÉm tra t√≠n hi·ªáu sheet
            if signal != "MUA M·∫†NH":
                logger.info(f"‚ùå {symbol} b·ªã lo·∫°i do t√≠n hi·ªáu Sheet = {signal}")
                continue

            # ‚úÖ G·ª≠i t√≠n hi·ªáu check TradingView tr·ª±c ti·∫øp
            symbol_tv = symbol.replace("-", "").upper()
            url = "https://scanner.tradingview.com/crypto/scan"
            payload = {
                "symbols": {"tickers": [f"OKX:{symbol_tv}"], "query": {"types": []}},
                "columns": ["recommendation"]
            }

            logger.debug(f"üì° G·ª≠i request TV: {payload}")
            try:
                res = requests.post(url, json=payload, timeout=5)
                res.raise_for_status()
                data = res.json()
                logger.debug(f"üéØ Ph·∫£n h·ªìi TV: {data}")

                if not data.get("data") or not data["data"][0]["d"]:
                    logger.info(f"‚ùå {symbol} b·ªã lo·∫°i do kh√¥ng c√≥ t√≠n hi·ªáu TV")
                    continue

                signal_tv = data["data"][0]["d"][0]
                if signal_tv not in ["BUY", "STRONG_BUY"]:
                    logger.info(f"‚ùå {symbol} b·ªã lo·∫°i do t√≠n hi·ªáu TV = {signal_tv}")
                    continue
                logger.info(f"‚úÖ T√≠n hi·ªáu TV OK: {symbol} = {signal_tv}")

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è L·ªói l·∫•y t√≠n hi·ªáu TV cho {symbol}: {e}")
                continue

            # ‚úÖ Mua SPOT
            usdt_amount = 10
            price = exchange.fetch_ticker(symbol.replace("-", "/"))['last']
            quantity = round(usdt_amount / price, 6)

            logger.info(f"üü¢ Mua {symbol} v·ªõi kh·ªëi l∆∞·ª£ng {quantity} @ {price}")
            order = exchange.create_market_buy_order(symbol.replace("-", "/"), quantity)

            logger.info(f"‚úÖ ƒê√£ mua {symbol}: OrderID = {order['id']}")

        except Exception as e:
            logger.warning(f"‚ùå L·ªói d√≤ng {i}: {e}")


if __name__ == "__main__":
    logger.info("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y bot SPOT OKX...")
    run_bot()
