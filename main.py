
import os
import requests
import csv
import logging
from datetime import datetime
import ccxt

logging.basicConfig(level=logging.INFO)

# ‚úÖ C·∫•u h√¨nh OKX
exchange = ccxt.okx({
    "apiKey": os.getenv("OKX_API_KEY"),
    "secret": os.getenv("OKX_API_SECRET"),
    "password": os.getenv("OKX_API_PASSPHRASE"),
    "enableRateLimit": True,
    "options": {"defaultType": "spot"},
})

# ‚úÖ ƒê·ªçc Google Sheet
def fetch_sheet():
    try:
        sheet_url = os.getenv("SPREADSHEET_URL")
        if sheet_url is None:
            logging.error("‚ùå SPREADSHEET_URL kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p trong bi·∫øn m√¥i tr∆∞·ªùng")
            return []
        csv_url = sheet_url.replace("/edit#gid=", "/export?format=csv&gid=")
        res = requests.get(csv_url)
        res.raise_for_status()
        return list(csv.reader(res.content.decode("utf-8").splitlines()))
    except Exception as e:
        logging.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i Google Sheet: {e}")
        return []
# ‚úÖ L·∫•y t√≠n hi·ªáu tradingview
def check_tradingview_signal(symbol: str) -> str:
    try:
        url = "https://scanner.tradingview.com/crypto/scan"
        payload = {
            "symbols": {"tickers": [f"BINANCE:{symbol}"], "query": {"types": []}},
            "columns": ["recommendation"]
        }
        res = requests.post(url, json=payload)
        res.raise_for_status()
        signal = res.json()['data'][0]['d'][0]
        return signal
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è L·ªói l·∫•y t√≠n hi·ªáu TV cho {symbol}: {e}")
        return None
# ‚úÖ H√†m ch√≠nh
def run_bot():
    logging.info("ü§ñ B·∫Øt ƒë·∫ßu ch·∫°y bot SPOT OKX...")
    now = datetime.utcnow()
    rows = fetch_sheet()

    if not rows:
        logging.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ Google Sheet.")
        return

    header = rows[0]
    logging.info(f"üìå Header: {header}")
    rows = rows[1:]

    for i, row in enumerate(rows):
        try:
            logging.debug(f"üß™ ƒêang x·ª≠ l√Ω d√≤ng {i}: {row}")
            if not row or len(row) < 2:
                logging.warning(f"‚ö†Ô∏è D√≤ng {i} kh√¥ng h·ª£p l·ªá: {row}")
                continue

            coin = (row[0] or "").strip().upper()
            signal = (row[1] or "").strip().upper()
            gia_hien_tai = row[2] if len(row) > 2 else ""
            da_mua = (row[5] or "").strip().upper() if len(row) > 5 else ""

            if signal != "MUA M·∫†NH":
                logging.info(f"‚õî {coin} b·ªã lo·∫°i do t√≠n hi·ªáu = {signal}")
                continue

            if da_mua == "ƒê√É MUA":
                logging.info(f"‚úÖ {coin} ƒë√£ mua tr∆∞·ªõc ƒë√≥ ‚Üí b·ªè qua")
                continue
            logging.info(f"üõí ƒêang x√©t mua {coin}...")
            # T√≠n hi·ªáu TV
            signal_tv = check_tradingview_signal(symbol_tv)
            if signal_tv not in ["BUY", "STRONG_BUY"]:
                logging.info(f"‚ùå {symbol} b·ªã lo·∫°i do t√≠n hi·ªáu TV = {signal_tv}")
                continue
            # L·∫•y gi√° th·ªã tr∆∞·ªùng
            try:
                ticker = exchange.fetch_ticker(f"{coin}/USDT")
                last_price = ticker['last']
                logging.info(f"üí∞ Gi√° hi·ªán t·∫°i {coin}: {last_price}")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° cho {coin}: {e}")
                continue

            # ƒê·∫∑t l·ªánh mua 10 USDT
            usdt_amount = 10
            amount = round(usdt_amount / last_price, 6)
            logging.info(f"üì¶ ƒê·∫∑t mua {coin} v·ªõi s·ªë l∆∞·ª£ng {amount} ({usdt_amount} USDT)")
            # l·ªánh gi·∫£ l·∫≠p:
            # order = exchange.create_market_buy_order(f"{coin}/USDT", amount)

        except Exception as e:
            logging.warning(f"‚ö†Ô∏è L·ªói t·∫°i d√≤ng {i}: {e}")

if __name__ == "__main__":
    run_bot()
