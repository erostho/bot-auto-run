import os
import ccxt
import pandas as pd
import logging
from datetime import datetime
from tradingview_ta import TA_Handler, Interval

# Logging setup
logging.basicConfig(
    level=logging.DEBUG,  # thay v√¨ DEBUG/INFO
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# --- Load bi·∫øn m√¥i tr∆∞·ªùng ---
SPREADSHEET_URL = os.environ.get("SPREADSHEET_URL")
OKX_API_KEY = os.environ.get("OKX_API_KEY")
OKX_API_SECRET = os.environ.get("OKX_API_SECRET")
OKX_API_PASSPHRASE = os.environ.get("OKX_API_PASSPHRASE")

# --- Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng ---
if not SPREADSHEET_URL or not OKX_API_KEY:
    print("‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng")
    exit()

# --- K·∫øt n·ªëi OKX SPOT ---
exchange = ccxt.okx({
    'apiKey': OKX_API_KEY,
    'secret': OKX_API_SECRET,
    'password': OKX_API_PASSPHRASE,
    'enableRateLimit': True,
    'options': {'defaultType': 'spot'}
})
exchange.load_markets()
# --- ƒê·ªçc Google Sheet public (CSV) ---
try:
    df = pd.read_csv(SPREADSHEET_URL)
except Exception as e:
    print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc Sheet: {e}")
    exit()

# --- H√†m check t√≠n hi·ªáu t·ª´ TradingView ---
def check_tradingview_signal(symbol: str) -> str:
    try:
        # ‚ö†Ô∏è Gh√©p USDT n·∫øu ch∆∞a c√≥, kh√¥ng d√πng d·∫•u "/"
        tv_symbol = symbol.upper()
        if not tv_symbol.endswith("USDT"):
            tv_symbol += "USDT"

        print(f"üîç [TV] ƒêang ki·ªÉm tra t√≠n hi·ªáu TradingView cho: {tv_symbol}")

        handler = TA_Handler(
            symbol=tv_symbol,
            screener="crypto",
            exchange="OKX",
            interval=Interval.INTERVAL_1_HOUR
        )

        result = handler.get_analysis()
        recommendation = result.summary.get("RECOMMENDATION", "")
        print(f"‚úÖ [TV] T√≠n hi·ªáu cho {tv_symbol} = {recommendation}")
        return recommendation

    except Exception as e:
        print(f"‚ö†Ô∏è [TV] L·ªói khi l·∫•y t√≠n hi·ªáu cho {symbol} ({tv_symbol}): {e}")
        return ""

# --- Duy·ªát t·ª´ng d√≤ng coin ---
now = datetime.utcnow()

for i, row in df.iterrows():
    try:
        coin = str(row.get("Coin")).strip()
        signal = str(row.get("T√≠n hi·ªáu")).strip().upper()
        buy_status = str(row.get("ƒê√£ mua", "")).strip().upper()
        date_str = str(row.get("Ng√†y", "")).strip()
        gia_mua = row.get("Gi√° Mua", None)

        if not coin or signal != "MUA M·∫†NH":
            continue
        if buy_status == "R·ªíI":
            continue

        # Ki·ªÉm tra th·ªùi gian t√≠n hi·ªáu c√≤n trong 60 ph√∫t
        try:
            dt = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
            if (now - dt).total_seconds() > 60 * 60:
                continue
        except:
            print(f"‚ö†Ô∏è L·ªói th·ªùi gian cho {coin}, b·ªè qua")
            continue
        # ‚úÖ Chu·∫©n h√≥a t√™n coin: b·ªè ƒëu√¥i -USDT n·∫øu c√≥, vi·∫øt hoa
        coin = coin.upper().replace("-USDT", "").replace("/USDT", "")
        symbol_spot = f"{coin}/USDT"
        market = exchange.markets.get(symbol_spot)
        if not market:
            # Th·ª≠ l·∫°i v·ªõi ƒë·ªãnh d·∫°ng PEPE-USDT n·∫øu d·∫°ng / kh√¥ng c√≥
            alt_symbol = symbol_spot.replace("/", "-")
            market = exchange.markets.get(alt_symbol)
            if market:
                print(f"üîÅ ƒê·ªïi qua symbol: {alt_symbol}")
                symbol_spot = alt_symbol
        
        if not market or market.get("spot") != True:
            print(f"‚ö†Ô∏è {symbol_spot} KH√îNG t√¨m th·∫•y trong exchange.markets")
            # G·ª£i √Ω c√°c symbol g·∫ßn gi·ªëng ƒë·ªÉ debug
            suggestions = [s for s in exchange.markets.keys() if coin.upper() in s and "USDT" in s]
            print(f"üëâ G·ª£i √Ω symbol g·∫ßn gi·ªëng: {suggestions}")
            continue
        
        # ‚úÖ N·∫øu qua ƒë∆∞·ª£c th√¨ l√† SPOT h·ª£p l·ªá
        print(f"‚úÖ {symbol_spot} l√† SPOT h·ª£p l·ªá")

        # ‚úÖ Check t√≠n hi·ªáu t·ª´ TradingView
        tv_signal = check_tradingview_signal(coin)
        if tv_signal not in ["BUY", "STRONG_BUY"]:
            print(f"‚õî {coin} b·ªã lo·∫°i do TV = {tv_signal}")
            continue

        # ‚úÖ L·∫•y gi√° hi·ªán t·∫°i
        try:
            price = exchange.fetch_ticker(symbol)['last']
        except:
            print(f"‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° {symbol}")
            continue

        # --- MUA n·∫øu ch∆∞a mua ---
        print(f"üîç ƒêang x√©t mua {symbol}...")
        
        if buy_status == "R·ªíI":
            print(f"‚è≠ ƒê√£ mua r·ªìi {symbol}, b·ªè qua")
            continue
        
        if symbol not in exchange.markets:
            print(f"‚õî {symbol} kh√¥ng t·ªìn t·∫°i tr√™n s√†n OKX")
            continue
        
        try:
            price = exchange.fetch_ticker(symbol)['last']
            print(f"üí∞ Gi√° hi·ªán t·∫°i c·ªßa {symbol}: {price}")
        except Exception as e:
            print(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° {symbol}: {e}")
            continue
        
        # N·∫øu c√≥ gi·ªõi h·∫°n gi√° trong sheet:
        if price > gia_mua * 1.05:
            print(f"‚ö†Ô∏è Gi√° {symbol} cao h∆°n 5% so v·ªõi gi√° mua g·ªëc ‚Üí KH√îNG MUA")
            continue
        
        # T√≠n hi·ªáu TradingView
        try:
            signal_tv = check_tradingview_signal(symbol.replace("/", ""))
            print(f"[TV] T√≠n hi·ªáu TradingView c·ªßa {symbol}: {signal_tv}")
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y t√≠n hi·ªáu TradingView: {e}")
            continue
        
        if signal_tv not in ["BUY", "STRONG_BUY"]:
            print(f"üö´ {symbol} b·ªã lo·∫°i do t√≠n hi·ªáu TV = {signal_tv}")
            continue
        
        # T√≠nh amount v√† ƒë·∫∑t l·ªánh
        usdt_amount = 10
        amount = round(usdt_amount / price, 6)
        
        try:
            order = exchange.create_market_buy_order(symbol, amount)
            print(f"üöÄ ƒê√£ MUA {symbol} {amount:.6f} gi√° ~{price:.4f}")
        except Exception as e:
            print(f"‚ùå L·ªói MUA {symbol}: {e}")
            continue

        # T·∫°o l·ªánh b√°n
        order = exchange.create_market_sell_order(symbol, amount)
        print(f"üçë ƒê√É B√ÅN {symbol} {amount:.6f} gi√° ~{current_price:.4f}")

    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói b√°n {coin}: {e}")

print("‚úÖ Bot SPOT OKX ho√†n t·∫•t.")
